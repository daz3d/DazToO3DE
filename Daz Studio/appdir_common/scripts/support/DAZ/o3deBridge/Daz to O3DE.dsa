// DAZ Studio version 4.12.0.86 filetype DAZ Script

// Global Variables
var g_sBridge = "O3DE"
var g_sDazBridgeName = String( "Daz To %1" ).arg( g_sBridge )
var g_oFileInfo = new DzFileInfo( getScriptFileName() );
var g_sScriptPath = g_oFileInfo.path();
if( g_sScriptPath === "" ){
	// To be able to use the IDE Input your absolute Path.
	g_sScriptPath = "D:/GitRepos/DazToO3DE/Daz Studio/appdir_common/scripts/support/DAZ"
}	
g_oFileInfo.deleteLater();

// Global Includes
var g_sBridgeHelpers = String( "%1/dzBridgeUtils/Helpers.dsa" ).arg( g_sScriptPath );
var g_sBridgeEnv = String( "%1/dzBridgeUtils/Environment.dsa" ).arg( g_sScriptPath );
var g_sBridgeScene = String( "%1/dzBridgeUtils/Scene.dsa" ).arg( g_sScriptPath );
var g_sBridgePose = String( "%1/dzBridgeUtils/Morphs.dsa" ).arg( g_sScriptPath );
var g_sBridgeMorphs = String( "%1/dzBridgeUtils/Pose.dsa" ).arg( g_sScriptPath );
var g_sBridgeAutoWeight = String( "%1/dzBridgeUtils/AutoWeight.dsa" ).arg( g_sScriptPath );
var g_sBridgeExporter = String( "%1/dzBridgeUtils/Exporter.dsa" ).arg( g_sScriptPath );
var g_sBridgeDialog = String( "%1/dzBridgeUtils/Dialog.dsa" ).arg( g_sScriptPath )
var g_sBridgeWriter = String( "%1/dzBridgeUtils/Writer.dsa" ).arg( g_sScriptPath );
var g_sBridgeFigure = String( "%1/dzBridgeUtils/Figure.dsa" ).arg( g_sScriptPath );
var g_sBridgeSubdiv = String( "%1/dzBridgeUtils/Subdivision.dsa" ).arg( g_sScriptPath );
var g_sBridgeDforce = String( "%1/dzBridgeUtils/Dforce.dsa" ).arg( g_sScriptPath );

include( g_sBridgeHelpers ); // Dependencies : ...
include( g_sBridgeDforce ); // Dependencies : ...
include( g_sBridgeEnv );  // Dependencies : DzBridgeHelper
include( g_sBridgeWriter ); // Dependencies : DzBridgeHelper
include( g_sBridgeFigure ); // Dependencies : DzBridgeHelper
include( g_sBridgeSubdiv ); // Dependencies : DzBridgeHelper
include( g_sBridgeScene ); // Dependencies : DzBridgeHelper
include( g_sBridgeMorphs ); // Dependencies : DzBridgeHelper
include( g_sBridgePose ); // Dependencies : DzBridgeHelper
include( g_sBridgeAutoWeight ); // Dependencies : DzBridgeHelper
include( g_sBridgeExporter ); // Dependencies : DzBridgeHelper, DzBridgeMorphs
include( g_sBridgeDialog ); // Dependencies : DzBridgeHelper

(function( aArgs ){
	var s_nSubDivLevel;

	/*********************************************************************/
	/** 
	* Void: initalizes any arguments passed to the silent exporter
	*/
    function initilizeArgs( oBridgeDialog )
    {
        for( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
            vArg = aArgs[i];
            if( i == 0 ){
				oBridgeDialog.bSilent = vArg;
			}
			else if( i == 1 ){
				s_nSubDivLevel = vArg;
			}
			else if( i == 2 ){
				oBridgeDialog.bIncludeAnim = vArg;
			}
			else if( i == 3 ){
				oBridgeDialog.bRemoveIncompatible = vArg;
			}
			else if( i == 4 ){
				oBridgeDialog.bIncludeMorphs = vArg;
			}
			else if( i == 5 ){
				oBridgeDialog.bCollectTextures = vArg;
			}
			else if( i == 6 ){
				oBridgeDialog.bAutoWeights = vArg;
			}
			else if( i == 7 ){
				oBridgeDialog.sMorphPath = vArg;
			}
			else if( i == 8 ){
				oBridgeDialog.bNewSubdiv = vArg;
			}
        }

    };

	/*********************************************************************/
	// void : ...
	function main()
	{
		var bDebugFBX = false;

		var oBridgeScene = new DzBridgeScene();
		
		oBridgeScene.buildRootLists();
		var oBridgeExporter = new DzBridgeExporter( g_sDazBridgeName, 
													g_sScriptPath,
													oBridgeScene
												   );
		var oBridgeDialog = new DzBridgeDialog( oBridgeExporter );
		
		// initilizeArgs( oBridgeDialog )

		oBridgeExporter.writeConfigPath();
		oBridgeExporter.clearExportDir();

		if( !oBridgeDialog.bSilent ){
			if( !oBridgeDialog.prepareExportDialog( oBridgeScene ) ){
				return
			}
		}
		
		var oBridgeAutoWeights = new DzBridgeAutoWeight( oBridgeExporter.sRootPath );
		var oBridgePose = new DzBridgePose();
		var oBridgeEnvironment = new DzBridgeEnvironment();
		var sFileBasename;
		var sBaseDirectory; 
		
		for( nElementId in oBridgeScene.oToExport ){
			var oExportInfo = oBridgeScene.oToExport[nElementId]
			var oNode = oExportInfo.oNode;
			var nExportType = oExportInfo.nExportType;
			var sCleanedName = oNode.getLabel().replace(/[^a-zA-Z0-9_]/g, "" )
			var bEnable = oExportInfo.bEnable;
			var bIncludeSubdiv = oExportInfo.bIncludeSubdiv;
			var bIncludeAnim = oExportInfo.bIncludeAnim;
			var bIncludeMorphs = oExportInfo.bIncludeMorphs;
			var bCollectTextures = oExportInfo.bCollectTextures;
			var bRemoveIncompatible = oExportInfo.bRemoveIncompatible;
			var bAutoWeights = oExportInfo.bAutoWeights;
			var bNewSubdiv = oExportInfo.bNewSubdiv;
			bIsBone = oNode.getSkeleton() != null;

			if( !bEnable ){
				continue
			}
			oBridgeScene.setOnlyVisible( oNode );
			oBridgeExporter.bIncludeAnim = bIncludeAnim;
			if( bAutoWeights ){ 
				if( MessageBox.warning(
					qsTr( "Transfering the Weights will destroy the current state of your scene save your scene before exporting." ),
					g_sDazBridgeName, qsTr( "&Continue" ), qsTr( "&Cancel" ) ) == 1 ){
					return;
				}
				oBridgeAutoWeights.weightObjects( oNode )
			}
			oBridgeExporter.setLock( oNode, true, false );
			oBridgeExporter.makeEndDir( sCleanedName );

			// Morph Export
			if( bIncludeMorphs ){
				oBridgeExporter.getMorphString( oExportInfo.aExportableProperties );
				oBridgeExporter.loadMorphLinks( oExportInfo.aExportableProperties, oNode );
				oBridgeExporter.disconnectMorphs( oExportInfo.aExportableProperties );
				// oBridgeExporter.disconnectSkeleton( oFigure );
			};	

			// Export Figure
			var oBridgeFigure = new DzBridgeFigure( oNode );
			var oBridgeSubdiv = new DzBridgeSubdivision( g_sScriptPath, oExportInfo );
			var oBridgeDforce = new DzBridgeDforce( oNode );


			oBridgeFigure.loadFigureBoneData();
			oBridgePose.loadPoseData( oNode, true );
			oBridgeDforce.findWeights( oExportInfo )

			if( oBridgeExporter.oExportTypes.EnvProp == nExportType ){
				oBridgeEnvironment.updateName( oNode, true )
				if( bIsBone ){
					oBridgeEnvironment.flattenObjectHierarchy( oNode );
				}
			}

			if( bRemoveIncompatible ){
				oBridgeFigure.removeIncompatibleNodes( oNode );
			}
			if( bIncludeSubdiv && oBridgeSubdiv.isSubdivPrereq() ){
				oBridgeSubdiv.lockSubdivisionProperties( true );
				oBridgeFigure.setEyelashVisibility( oNode, false );
				oBridgeExporter.exportOBJ( oNode, sCleanedName, false );
				oBridgeFigure.setEyelashVisibility( oNode, true );
				oBridgeExporter.exportFBX( oNode, sCleanedName, "_HD" , bDebugFBX );
				oBridgeSubdiv.lockSubdivisionProperties( false );
				oBridgeExporter.exportFBX( oNode, sCleanedName, "_base" , bDebugFBX );
			}
			else if( bIncludeSubdiv ){
				oBridgeSubdiv.lockSubdivisionProperties( true );
				oBridgeFigure.setEyelashVisibility( oNode, false );
				oBridgeExporter.exportOBJ( oNode, sCleanedName, false );
				oBridgeFigure.setEyelashVisibility( oNode, true );
				oBridgeExporter.exportFBX( oNode, sCleanedName, "" ,bDebugFBX );
			}
			else{
				oBridgeSubdiv.lockSubdivisionProperties( false );
				oBridgeFigure.setEyelashVisibility( oNode, false );
				oBridgeExporter.exportOBJ( oNode, sCleanedName, false );
				oBridgeFigure.setEyelashVisibility( oNode, true );
				oBridgeExporter.exportFBX( oNode, sCleanedName, "" ,bDebugFBX );
			}

			oBridgeExporter.setLock( oNode, false, true );
			oBridgePose.restorePose( oNode );
			oBridgeScene.reparentFigure( oExportInfo );
			if ( bIncludeMorphs ){
				oBridgeExporter.reconnectMorphs( oExportInfo.aExportableProperties );
				// oBridgeExporter.reconnectSkeleton( oNode );
			}

			// Write data
			sFileBasename = String( "%1/%2/%2" ).arg( oBridgeExporter.sRootPath ).arg( sCleanedName );
			sBaseDirectory = String( "%1/%2" ).arg( oBridgeExporter.sRootPath ).arg( sCleanedName );
			
			var oBridgeWriter = new DzBridgeWriter( oBridgeExporter, oBridgeFigure, oBridgePose, oExportInfo )

			if( oBridgeExporter.oExportTypes.EnvProp == nExportType ){
				oBridgeEnvironment.updateName( oNode );
				if( !bIsBone ){
					oBridgeWriter.writeMemo( sBaseDirectory + "/nobone.txt", "not skeleton" );
				}	
			}

			oBridgeWriter.writeParentingData( oNode, sFileBasename + ".dat" );
			sDtufilename = oBridgeWriter.writeConfiguration( oNode , sFileBasename, sBaseDirectory );
			if( bIncludeSubdiv && bNewSubdiv ){
				oBridgeSubdiv.processFBX( sDtufilename )
			}
			oBridgeExporter.setLock( oNode, false, false );
		}

		oBridgeScene.setHideRoot( true, true );
		oBridgeScene.setHideRoot( false, true );
	};
	
	/*********************************************************************/
	main();

})( getArguments() );