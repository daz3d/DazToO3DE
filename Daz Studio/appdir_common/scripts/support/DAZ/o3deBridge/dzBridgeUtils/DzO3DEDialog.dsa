
var g_sBridge = "O3DE"
/** 
* Contains the Dialogs for the User to Control
* @class
* @constructor
* @param {DzBridgeExporter} oBridgeExporter
*/
function DzBridgeDialog( oBridgeExporter )
{
    this.init( oBridgeExporter )
};

	/*********************************************************************/
    DzBridgeDialog.prototype = Object.create( DzBridgeHelpers.prototype )
	DzBridgeDialog.constructor = DzBridgeDialog
	DzBridgeDialog.superclass = DzBridgeHelpers.prototype

    /*********************************************************************/
    DzBridgeDialog.prototype.init = function( oBridgeExporter )
    {
		this.bSilent;
        this.bIncludeSubdiv;
		this.bIncludeAnim;
		this.bIncludeMorphs;
		this.bCollectTextures;
		this.bRemoveIncompatible;
		this.bAutoWeights;
		this.bNewSubdiv;

        this.sMorphDialog = String( "/dzBridgeUtils/Dz%1MorphSelectionDialog" ).arg( g_sBridge )
	    this.sSubdivDialog = String( "/dzBridgeUtils/Dz%1SubdivisionDialog" ).arg( g_sBridge )
        this.sPresetPath = oBridgeExporter.sPresetPath;

        this.aExportableProperties = [];
        this.aSubdivisionCombos = [];

        this.oNode;

        DzBridgeDialog.superclass.init.call( this,
                                             oBridgeExporter.sDazBridgeName,
                                             oBridgeExporter.sScriptPath,
                                             oBridgeExporter.sRootPath,
                                             oBridgeExporter.sFbxPath )
    };

	/*********************************************************************/
	DzBridgeDialog.prototype.exportDialog = function( wBridgeDialog )
	{
		// Get the current style
        var oStyle = App.getStyle();
        // Get the general margin
        var nMargin = oStyle.pixelMetric( "DZ_GeneralMargin" );
		
		// Set the dialog title 
        wBridgeDialog.caption = "Choose Your Exports";

		var wMainWgt = new DzWidget( wBridgeDialog );

		var lytMain = new DzVBoxLayout( wMainWgt );
        lytMain.margin = nMargin;
        lytMain.spacing = nMargin;
		
		var wExportLabel = new DzLabel( wMainWgt )
        wExportLabel.text = "Your Exports have been automatically assigned change with caution..."
        lytMain.addWidget( wExportLabel )

		var wOverride = DzWidget( wMainWgt );
		var lytOverrideGrid = new DzGridLayout( wOverride );
		lytOverrideGrid.margin = nMargin;
		lytOverrideGrid.spacing = nMargin;
        lytMain.addWidget( wOverride );

        this.wExportGrid = DzWidget( wMainWgt );
		this.lytExportGrid = new DzGridLayout( this.wExportGrid );
		this.lytExportGrid.margin = nMargin;
		this.lytExportGrid.spacing = nMargin;
        lytMain.addWidget(  this.wExportGrid );

		var wGlobalLabel = new DzLabel( wOverride );
        lytOverrideGrid.addWidget( wGlobalLabel, 0, 0 );

		var wEnableAll = new DzPushButton( wOverride );
        wEnableAll.text = "Enable All";
        lytOverrideGrid.addWidget( wEnableAll, 1, 0 );

		var wDisableAll = new DzPushButton( wOverride );
        wDisableAll.text = "Disable All";
        lytOverrideGrid.addWidget( wDisableAll, 1, 1 );

        var wObjectLabel = new DzLabel( this.wExportGrid );
        wObjectLabel.text = "Object Name";
        this.lytExportGrid.addWidget( wObjectLabel, 2, 0 );

        var wExportTypeLbl = new DzLabel( this.wExportGrid );
        wExportTypeLbl.text = "Choose Export Type";
        this.lytExportGrid.addWidget( wExportTypeLbl, 2, 1 );

        wBridgeDialog.addWidget( wMainWgt );
        wBridgeDialog.setFixedWidth( 500 );
		wBridgeDialog.addStretch()

		wEnableAll.released.scriptConnect( this, this.handleEnableAll );
		wDisableAll.released.scriptConnect( this, this.handleDisableAll );
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleEnableAll = function()
	{
		wChildren = this.wExportGrid.getChildrenOfWidget()
		for( var i = 0; i < wChildren.length; i++ ){
			wChild = wChildren[i]
			if( wChild.className() == "QCheckBox" ){
				wChild.checked = true;
			}
		}
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleDisableAll = function()
	{
		wChildren = this.wExportGrid.getChildrenOfWidget()
		for( var i = 0; i < wChildren.length; i++ ){
			wChild = wChildren[i]
			if( wChild.className() == "QCheckBox" ){
				wChild.checked = false;
			}
		}
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.prepareExportDialog = function( oBridgeScene )
	{
		wBridgeDialog = new DzBasicDialog();
		this.exportDialog( wBridgeDialog )
		this.createExportList( oBridgeScene );
		if( !wBridgeDialog.exec() ){
            return null;
		} 
		return true
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.createExportList = function( oBridgeScene )
	{
		oToExport = oBridgeScene.oToExport
		
		for( nElementId in oToExport ){
			var nRow = this.lytExportGrid.rowCount();
			var oNode = oToExport[nElementId].oNode;
			var nExportType = oToExport[nElementId].nExportType;
			
			var wNodeLabel = new DzLabel( this.wExportGrid );
			wNodeLabel.text = oNode.getLabel();
			wNodeLabel.setFixedWidth( 160 );
        	this.lytExportGrid.addWidget( wNodeLabel, nRow, 0 );

			var wExportTypeComboBox = new DzComboBox( this.wExportGrid );
            wExportTypeComboBox.addItem( "Env/Prop" );
            wExportTypeComboBox.addItem( "Figure" );
			wExportTypeComboBox.currentItem = nExportType;
			this.lytExportGrid.addWidget( wExportTypeComboBox, nRow, 1 );
			oToExport[nElementId].wExportOption = wExportTypeComboBox

			var wPromptSettings = new DzPushButton( this.wExportGrid );
			wPromptSettings.text = "Choose Export Settings";
			wPromptSettings.setFixedWidth( 200 );
			this.lytExportGrid.addWidget( wPromptSettings, nRow, 2 );
			oToExport[nElementId].wSettings = wPromptSettings

			var wEnableCbx  = new DzCheckBox( this.wExportGrid );
			wEnableCbx.checked = true;
			wEnableCbx.alignment = DzWidget.AlignCenter
			this.lytExportGrid.addWidget( wEnableCbx, nRow, 3 );
			oToExport[nElementId].wEnable = wEnableCbx

			oSignal = {"DzBridgeDialog" : this, "oExportInfo" : oToExport[nElementId]}
			oToExport[nElementId].wSettings.released.scriptConnect( oSignal, this.handleShowExportSettings );
			oToExport[nElementId].wExportOption['currentIndexChanged(int)'].scriptConnect( oSignal, this.handleExportType )
			oToExport[nElementId].wEnable.toggled.scriptConnect( oSignal, this.handleEnable );
		}

	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleShowExportSettings = function()
	{
		this.DzBridgeDialog.promptSettings( this.oExportInfo );
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleExportType = function()
	{
		this.oExportInfo.nExportType = this.oExportInfo.wExportOption.currentItem;
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleEnable = function()
	{
		this.oExportInfo.bEnable = this.oExportInfo.wEnable.checked;
	};

    /*********************************************************************/
	// Bool : ...
	// Export Settings Dialog
	DzBridgeDialog.prototype.promptSettings = function( oExportInfo )
	{
        // Assign Variable
        this.oNode = oExportInfo.oNode;

		// Get the current style
        var oStyle = App.getStyle();
        // Get the general margin
        var nMargin = oStyle.pixelMetric( "DZ_GeneralMargin" );

		wSettingsDialog = new DzBasicDialog();
		wSettingsDialog.caption = this.sDazBridgeName + ": Settings";
		if( this.oNode ){
			wSettingsDialog.caption += " - " + this.oNode.getLabel();
		}
		
		var sKey = wSettingsDialog.caption.replace( / /g, "" ) + "Dlg";
		wSettingsDialog.getWidget().objectName = sKey;
		
		var wMainWgt = new DzWidget( wSettingsDialog );
		
		// Create Layouts
		var lytSettings = new DzVBoxLayout( wMainWgt );
        lytSettings.margin = nMargin;
        lytSettings.spacing = nMargin;
		var lytMorphs = new DzHBoxLayout( lytSettings );
        lytMorphs.margin = nMargin;
        lytMorphs.spacing = nMargin;
		var lytSubdiv = new DzHBoxLayout( lytSettings );
        lytSubdiv.margin = nMargin;
        lytSubdiv.spacing = nMargin;
				
		// Checkbox to include morph data
		var wIncludeMorphsCbx = new DzCheckBox( wMainWgt );
		wIncludeMorphsCbx.text = "Enable Morphs";
		wIncludeMorphsCbx.checked = oExportInfo.bIncludeMorphs;
		lytMorphs.addWidget( wIncludeMorphsCbx );
		wIncludeMorphsCbx.enabled = false;

		// Button to choose morph data
		var wChooseMorphsBut = new DzPushButton( wMainWgt );
		wChooseMorphsBut.text = "Choose Morphs";
		wChooseMorphsBut.minWidth = 350;
		lytMorphs.addWidget( wChooseMorphsBut );
		wChooseMorphsBut.enabled = false;
		
		// Checkbox to export subdivisions
		var wEnableSubdivCbx = new DzCheckBox( wMainWgt );
		wEnableSubdivCbx.text = "Enable Subdivisions";
		wEnableSubdivCbx.checked = oExportInfo.bIncludeSubdiv;
		lytSubdiv.addWidget( wEnableSubdivCbx );

		// Button to choose subdivisions
		var wChooseSubdivBut = new DzPushButton( wMainWgt );
		wChooseSubdivBut.text = "Choose Subdivisions";
		wChooseSubdivBut.minWidth =  350;
		lytSubdiv.addWidget( wChooseSubdivBut );

		// Checkbox to include animation data
		var wIncludeAnimationsCbx = new DzCheckBox( wMainWgt );
		wIncludeAnimationsCbx.text = "Include animation data";
		wIncludeAnimationsCbx.checked = oExportInfo.bIncludeAnim;
		lytSettings.addWidget( wIncludeAnimationsCbx );
		wIncludeAnimationsCbx.enabled = false;

		// Advanced Settings
		this.wAdvanceSettings = new DzGroupBox( wMainWgt );	
		this.wAdvanceSettings.title = "Advanced Settings";
		this.wAdvanceSettings.checkable = true;
		this.wAdvanceSettings.checked = false;
		this.wAdvanceSettings.setFixedWidth( 490 );
		lytSettings.addWidget( this.wAdvanceSettings )

		// Create Advance Settings Layout
		this.wAdvWgt = new DzWidget( this.wAdvanceSettings );
		var lytAdvance = new DzVBoxLayout( this.wAdvWgt );
		lytAdvance.margin = nMargin;
        lytAdvance.spacing = nMargin;
		this.wAdvWgt.hide();

		// Checkbox to collect textures at export
		var wCollectTexturesCbx = new DzCheckBox( this.wAdvWgt );
		wCollectTexturesCbx.text = "Collect Textures";
		wCollectTexturesCbx.checked = true; //oExportInfo.bCollectTextures;
		lytAdvance.addWidget( wCollectTexturesCbx );

		// Checkbox to Remove incompatible nodes
		var wRemoveIncompatible = new DzCheckBox( this.wAdvWgt );
		wRemoveIncompatible.text = "Remove any incompatible nodes";
		wRemoveIncompatible.checked = oExportInfo.bRemoveIncompatible;
		lytAdvance.addWidget( wRemoveIncompatible )

		// Checkbox to Use New Subdiv Export
		var wNewSubdiv = new DzCheckBox( this.wAdvWgt );
		wNewSubdiv.text = "Better Subdivision Export";
		wNewSubdiv.checked = oExportInfo.bNewSubdiv;
		lytAdvance.addWidget( wNewSubdiv )
		wNewSubdiv.enabled = false;

		// Checkbox to use Transfer Utility
		var wTransferUtil = new DzCheckBox( this.wAdvWgt );
		wTransferUtil.text = "Auto-Weight";
		wTransferUtil.checked = oExportInfo.bAutoWeights;
		lytAdvance.addWidget( wTransferUtil )

		// Create Connections
		oSignal = {"DzBridgeDialog" : this, "oExportInfo" : oExportInfo}
		wChooseMorphsBut.released.scriptConnect(oSignal, this.handleShowMorphDialog );
		wChooseSubdivBut.released.scriptConnect(oSignal, this.handleShowSubdivDialog );
		this.wAdvanceSettings.toggled.scriptConnect( this, this.handleShowAdvancedSetting)

		//Help 
		wTransferUtil.whatsThis = "When a mesh like a button is not weighted it will not keep its location. \
When leaving daz to deal with it we will be automatically transfer the weights from the parents."

		wSettingsDialog.addWidget( wMainWgt );
		wSettingsDialog.setFixedSize( 500, 150 )
		wSettingsDialog.addStretch();
		// When user Cancels the dialog
		if( !wSettingsDialog.exec() ){
			return false;
		}
		
		// Set settings variables from the Dialog
		oExportInfo.bIncludeSubdiv = wEnableSubdivCbx.checked
		oExportInfo.bIncludeAnim = wIncludeAnimationsCbx.checked;
		oExportInfo.bIncludeMorphs = wIncludeMorphsCbx.checked;
		oExportInfo.bCollectTextures = wCollectTexturesCbx.checked;
		oExportInfo.bRemoveIncompatible = wRemoveIncompatible.checked;
		oExportInfo.bAutoWeights = wTransferUtil.checked;
		oExportInfo.bNewSubdiv = wNewSubdiv.checked;
		// When user Accepts the dialog
		return true;
	};

	/*********************************************************************/
	// Void : Display the advanced widget.
	DzBridgeDialog.prototype.handleShowAdvancedSetting = function()
	{	
		if( this.wAdvanceSettings.checked ){
			this.wAdvWgt.show()
			wSettingsDialog.setFixedSize(wSettingsDialog.width,  wSettingsDialog.height + 75 )
		}
		else{
			wSettingsDialog.setFixedSize(wSettingsDialog.width, wSettingsDialog.height - this.wAdvWgt.height)
			this.wAdvWgt.hide()
			
		}
		
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleShowMorphDialog = function()
	{
		this.oExportInfo.aExportableProperties = this.DzBridgeDialog.executeSubScript(
			this.DzBridgeDialog.sMorphDialog, 
			[this.oExportInfo.oNode, this.DzBridgeDialog.sPresetPath] 
		);
	};

	/*********************************************************************/
	DzBridgeDialog.prototype.handleShowSubdivDialog = function()
	{
	    this.oExportInfo.aSubdivisionCombos = this.DzBridgeDialog.executeSubScript(
			this.DzBridgeDialog.sSubdivDialog, 
			[this.oExportInfo.oNode] 
		)
	};

    /*********************************************************************/
	// Number : ...
	DzBridgeDialog.prototype.promptExportType = function()
	{
		var wDlg = new DzBasicDialog();
		wDlg.caption = "Select Export Type";
		
		var wLyt = new DzVBoxLayout( wDlg );
		wLyt.autoAdd = true;
		
		var wOptBG = new DzVButtonGroup( wDlg );
		wOptBG.columns = 1;
		
		var wRadioBtn;
		var aOptions = [ "Environment/Props", "Genesis8/3", "Both" ];
		for( var i = 0; i < aOptions.length; i += 1 ){
			wRadioBtn = new DzRadioButton( wOptBG );
			wRadioBtn.text = aOptions[i];
		}
		wOptBG.selected = this.oExportTypes.Figure;
		
		wDlg.addWidget( wOptBG );
		
		var oWidget = wDlg.getWidget();
		var sizeHint = oWidget.minimumSizeHint;
		var nHeight = sizeHint.height;
		var nWidth = sizeHint.width < 200 ? 200 : sizeHint.width;
		wDlg.setFixedSize( nWidth, nHeight );
		
		if( !wDlg.exec() ){
			return this.oExportTypes.None;
		}
		
		return wOptBG.selected;
	};